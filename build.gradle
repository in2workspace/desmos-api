plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'checkstyle'
    id 'org.owasp.dependencycheck' version '8.4.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id "com.github.ben-manes.versions" version "0.51.0"
}

group = 'es.in2'
version = '0.7.0'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.9"
}

checkstyle {
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

sonar {
    properties {
        property "sonar.projectName", "desmos-api"
        property "sonar.projectKey", "in2workspace_desmos"
        property "sonar.organization", "in2workspace"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions",
                "src/main/java/es/in2/desmos/DesmosApplication.java, "
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.0")
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // Data
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework:spring-jdbc'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.2.0'

    // Logback
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // Monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // Resilience
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.aspectj:aspectjrt:1.9.21'
    implementation 'org.springframework:spring-aspects:5.3.18'
    implementation 'org.aspectj:aspectjweaver:1.9.7'

    // Unit Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.testng:testng:7.7.0'

    // Integration Test
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:r2dbc:1.19.3'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.108.Final'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/DesmosApplication.class',
                    '**/configs/properties/**',
                    '**/configs/FlywayConfig.class',
                    '**/configs/QueueConfig.class'
            ])
        }))
    }
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
